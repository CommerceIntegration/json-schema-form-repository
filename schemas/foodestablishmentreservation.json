{
  "description": "A reservation to dine at a food-related business.Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.",
  "title": "FoodEstablishmentReservation",
  "version": "2.2",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "totalPrice": {
      "oneOf": [
        {
          "type": "number"
        },
        {
          "$ref": "file://pricespecification.json"
        },
        {
          "type": "string"
        }
      ],
      "description": "The total price for the reservation or ticket, including applicable taxes, shipping, etc."
    },
    "sameAs": {
      "type": "string",
      "description": "URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.",
      "format": "uri"
    },
    "image": {
      "oneOf": [
        {
          "$ref": "file://imageobject.json"
        },
        {
          "type": "string",
          "format": "uri"
        }
      ],
      "description": "An image of the item. This can be a <a href=\"http://schema.org/URL\">URL</a> or a fully described <a href=\"http://schema.org/ImageObject\">ImageObject</a>."
    },
    "reservedTicket": {
      "description": "A ticket associated with the reservation.",
      "$ref": "file://ticket.json"
    },
    "bookingAgent": {
      "oneOf": [
        {
          "$ref": "file://person.json"
        },
        {
          "$ref": "file://organization.json"
        }
      ],
      "description": "'bookingAgent' is an out-dated term indicating a 'broker' that serves as a booking agent."
    },
    "additionalType": {
      "type": "string",
      "description": "An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.",
      "format": "uri"
    },
    "reservationStatus": {
      "description": "The current status of the reservation.",
      "$ref": "file://reservationstatustype.json"
    },
    "underName": {
      "oneOf": [
        {
          "$ref": "file://organization.json"
        },
        {
          "$ref": "file://person.json"
        }
      ],
      "description": "The person or organization the reservation or ticket is for."
    },
    "provider": {
      "oneOf": [
        {
          "$ref": "file://organization.json"
        },
        {
          "$ref": "file://person.json"
        }
      ],
      "description": "The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller."
    },
    "mainEntityOfPage": {
      "oneOf": [
        {
          "$ref": "file://creativework.json"
        },
        {
          "type": "string",
          "format": "uri"
        }
      ],
      "description": "Indicates a page (or other CreativeWork) for which this thing is the main entity being described.\n      <br /><br />\n      See <a href=\"/docs/datamodel.html#mainEntityBackground\">background notes</a> for details.\n      "
    },
    "reservationFor": {
      "description": "The thing -- flight, event, restaurant,etc. being reserved.",
      "$ref": "file://thing.json"
    },
    "description": {
      "type": "string",
      "description": "A short description of the item."
    },
    "modifiedTime": {
      "type": "string",
      "description": "The date and time the reservation was modified.",
      "format": "date-time"
    },
    "broker": {
      "oneOf": [
        {
          "$ref": "file://person.json"
        },
        {
          "$ref": "file://organization.json"
        }
      ],
      "description": "An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred."
    },
    "startTime": {
      "type": "string",
      "description": "The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.",
      "format": "date-time"
    },
    "alternateName": {
      "type": "string",
      "description": "An alias for the item."
    },
    "bookingTime": {
      "type": "string",
      "description": "The date and time the reservation was booked.",
      "format": "date-time"
    },
    "potentialAction": {
      "description": "Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.",
      "$ref": "file://action.json"
    },
    "name": {
      "type": "string",
      "description": "The name of the item."
    },
    "partySize": {
      "oneOf": [
        {
          "$ref": "file://quantitativevalue.json"
        },
        {
          "type": "number"
        }
      ],
      "description": "Number of people the reservation should accommodate."
    },
    "priceCurrency": {
      "type": "string",
      "description": "The currency (in 3-letter ISO 4217 format) of the price or a price component, when attached to PriceSpecification and its subtypes."
    },
    "url": {
      "type": "string",
      "description": "URL of the item.",
      "format": "uri"
    },
    "programMembershipUsed": {
      "description": "Any membership in a frequent flyer, hotel loyalty program, etc. being applied to the reservation.",
      "$ref": "file://programmembership.json"
    },
    "reservationId": {
      "type": "string",
      "description": "A unique identifier for the reservation."
    },
    "endTime": {
      "type": "string",
      "description": "The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.",
      "format": "date-time"
    }
  }
}