{
  "description": "\n      A BreadcrumbList is an ItemList consisting of a chain of linked Web pages, typically described using at least their URL and their name, and typically ending with the current page.\n      <br />\n      <br />\n      The 'position' property is used to reconstruct the order of the items in a BreadcrumbList.\n      The convention is that a breadcrumb list has an itemListOrder of ItemListOrderAscending (lower values listed first), and that the\n      first items in this list correspond to the \"top\" or beginning of the breadcrumb trail, e.g. with a site or section homepage.\n      The specific values of 'position' are not assigned meaning for a BreadcrumbList, but they should be integers, e.g. beginning\n      with '1' for the first item in the list.\n      ",
  "title": "BreadcrumbList",
  "version": "2.2",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "potentialAction": {
      "description": "Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.",
      "$ref": "file://action.json"
    },
    "name": {
      "type": "string",
      "description": "The name of the item."
    },
    "sameAs": {
      "type": "string",
      "description": "URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website."
    },
    "image": {
      "oneOf": [
        {
          "$ref": "file://imageobject.json"
        },
        {
          "type": "string"
        }
      ],
      "description": "An image of the item. This can be a <a href=\"http://schema.org/URL\">URL</a> or a fully described <a href=\"http://schema.org/ImageObject\">ImageObject</a>."
    },
    "itemListOrder": {
      "oneOf": [
        {
          "$ref": "file://itemlistordertype.json"
        },
        {
          "type": "string"
        }
      ],
      "description": "Type of ordering (e.g. Ascending, Descending, Unordered)."
    },
    "url": {
      "type": "string",
      "description": "URL of the item."
    },
    "numberOfItems": {
      "type": "number",
      "description": "The number of items in an ItemList. Note that some descriptions might not fully describe all items in a list (e.g., multi-page pagination); in such cases, the numberOfItems would be for the entire list."
    },
    "mainEntityOfPage": {
      "oneOf": [
        {
          "$ref": "file://creativework.json"
        },
        {
          "type": "string"
        }
      ],
      "description": "Indicates a page (or other CreativeWork) for which this thing is the main entity being described.\n      <br /><br />\n      See <a href=\"/docs/datamodel.html#mainEntityBackground\">background notes</a> for details.\n      "
    },
    "additionalType": {
      "type": "string",
      "description": "An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally."
    },
    "alternateName": {
      "type": "string",
      "description": "An alias for the item."
    },
    "itemListElement": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "$ref": "file://thing.json"
        },
        {
          "$ref": "file://listitem.json"
        }
      ],
      "description": "For itemListElement values, you can use simple strings (e.g. \"Peter\", \"Paul\", \"Mary\"), existing entities, or use ListItem.\n    <br/><br/>\n    Text values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.\n    <br/><br/>\n    Note: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases."
    },
    "description": {
      "type": "string",
      "description": "A short description of the item."
    }
  }
}